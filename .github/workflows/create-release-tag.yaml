name: Update Release Draft

on:
  pull_request_target:
    types: [closed]

jobs:
  update-release-draft:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Check for labels
        id: labels
        uses: actions/github-script@v7
        with:
          script: |
            // label name
            const BUG_FIX = 'Bug fix';
            const NEW_FEATURE = 'New feature / Improvement';
            const RELEASE = 'Release';
            const OTHERS = 'Others';
            const kindLabelNames = new Set([BUG_FIX, NEW_FEATURE, RELEASE, OTHERS]);

            const payload = context.payload.pull_request;
            const currentLabelNames = payload.labels.map(label => label.name);
            const title = payload.title;
            const newLabelName = (() => {
              if (title.startsWith("feat")) {
                return NEW_FEATURE;
              }
              if (title.startsWith("fix")) {
                return BUG_FIX;
              }
              if (title.startsWith("release")) {
                return RELEASE;
              }
              return OTHERS;
            })();

            const labelsToAdd = currentLabelNames.includes(newLabelName) ? [] : [newLabelName];
            const labelsToRemove = currentLabelNames.filter(currentKindLabelName => currentKindLabelName !== newLabelName && kindLabelNames.has(currentKindLabelName));

            // output log
            console.log("newLabelName", newLabelName);
            console.log("currentLabelNames", currentLabelNames);
            console.log("labelsToAdd", labelsToAdd);
            console.log("labelsToRemove", labelsToRemove);

            // add kind label
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labelsToAdd,
              });
            }
            // remove unnecessary kind labels
            if (labelsToRemove.length > 0) {
              labelsToRemove.forEach(async (label) => {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                name: label
              });
            })}
      - name: Get all changed microservices files
        id: changed-microservice-files
        uses: tj-actions/changed-files@v44
        with:
          dir_names: "true"
          dir_names_max_depth: 2
          exclude_submodules: "true"
          files: |
            microservices/**
      - name: Use outputs in next steps
        uses: actions/github-script@v6
        with:
          script: |
            const labelsToAdd = new Set();
            const labelColor = '0052CD';
            const changedFiles = "${{ steps.changed-microservice-files.outputs.all_changed_files }}".split(" ");

            console.log(changedFiles)

            const currentLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });


            // filter by color to get services' label
            const currentServiceLabelNames = currentLabels.data.filter(label => label.color === labelColor).map(label => label.name);
            const changedServiceNames = new Set();

            changedFiles.forEach((file) => {
              const directories = file.split('/');
              if (directories.length > 1) {
                // file => microservices/{service_name}/**
                // directories => ["microservices", {service_name}, ...]
                const serviceName = directories[1];
                changedServiceNames.add(serviceName);
                // https://docs.github.com/ja/rest/issues/labels?apiVersion=2022-11-28#list-labels-for-an-issue
                if (!currentServiceLabelNames.includes(serviceName)) {
                  labelsToAdd.add(serviceName);
                }
              }
            });

            const labelsToRemove = new Set(
              [...currentServiceLabelNames].filter(currentServiceLabelName => !changedServiceNames.has(currentServiceLabelName))
            );

            // Output log
            console.log("currentServiceLabelNames", currentServiceLabelNames);
            console.log("changedServiceNames", changedServiceNames);
            console.log("labelsToAdd", labelsToAdd);
            console.log("labelsToRemove", labelsToRemove);

            if (labelsToAdd.size === 0 && labelsToRemove.size === 0) {
              return;
            }

            if (labelsToAdd.size > 0) {
              Array.from(labelsToAdd).forEach(async (label) => {
                // Create a service label
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label,
                    color: labelColor
                  });
                } catch (error) {
                  // status 422 means that a label has already created
                  // https://docs.github.com/ja/rest/issues/labels?apiVersion=2022-11-28#create-a-label--status-codes
                  if (error.status !== 422) throw error;
                }
              });

              // Assign new service labels
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: [...labelsToAdd]
              });
            }

            // remove unnecessary service labels
            if (labelsToRemove.size > 0) {
              Array.from(labelsToRemove).forEach(async (label) => {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                name: label
              });
            })}
      - name: Create or Update Release Draft
        uses: actions/github-script@v7
        with:
          script: |
            const excludeList = ['foo'];
            const labelColor = '0052CD';

            const currentLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            })

            for (const label of currentLabels.data) {
              if (label.name.toLowerCase() === "release") {
                // release PR is not added to Release description
                return;
              }
            }

            // filter by color to get services' label
            const currentServiceLabelNames = currentLabels.data.filter(label => label.color === labelColor).map(label => label.name);

            // paginate method get all data
            // https://docs.github.com/ja/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28#example-using-the-octokitjs-pagination-method
            const releases = await github.paginate(github.rest.repos.listReleases, {
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const draftReleases = releases.filter(release => release.draft && currentServiceLabelNames.includes(release.name));

            const servicesToCreate = currentServiceLabelNames.filter(serviceName => !excludeList.includes(serviceName) && draftReleases.find(release => release.name === serviceName) === undefined);
            const prTitle = context.payload.pull_request.title;
            const prNumber = context.payload.pull_request.number;
            const authorId = context.payload.pull_request.user.login;
            const newBody = `- ${prTitle} by @${authorId} in #${prNumber}`;

            console.log("draftReleases", draftReleases);
            console.log("currentServiceLabelNames", currentServiceLabelNames);
            console.log("servicesToCreate", servicesToCreate);
            console.log("prTitle", prTitle);
            console.log("prNumber", prNumber);

            // update draft release
            for (const draftRelease of draftReleases) {
                const body = `${draftRelease.body}\n${newBody}`;
                await github.rest.repos.updateRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: draftRelease.id,
                    body
                });
            }

            // Create new draft
            for (const service of servicesToCreate) {
                await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: `${service}-draft-${new Date().toISOString()}`,
                    name: service,
                    body: newBody,
                    draft: true
                });
            }
