version: 2.1
commands:
  install_commands:
    steps:
      - run:
          name: install commands
          command: |
            apk add curl jq yq git bash openssh
  set_up_git:
    steps:
      - checkout
      - run:
          name: setup git user
          command: |
            git config user.email $GITHUB_EMAIL
            git config user.name $GITHUB_USER
  create_pr:
    steps:
      - checkout
      - run:
          name: set env name
          command: |
            export SERVICE_NAME=$(echo ${CIRCLE_TAG} | cut -d/ -f2)
            export VERSION=$(echo $CIRCLE_TAG | cut -d/ -f3)
            export BRANCH_NAME="release_$(echo ${SERVICE_NAME})_$(echo ${VERSION})"

            touch .env_variable_for_ash
            echo 'export SERVICE_NAME=$(echo $SERVICE_NAME)' >> .env_variable_for_ash
            echo 'export VERSION=$(echo $VERSION)' >> .env_variable_for_ash
            echo 'export BRANCH_NAME=${BRANCH_NAME}' >> .env_variable_for_ash
      - run:
          name: Create and push changes
          command: |
            source .env_variable_for_ash

            git switch -c $BRANCH_NAME

            deployment_files=$(find . -type d -name "Deployment" -exec find {} -type f -name "*.yaml" \;)
            for file in $deployment_files; do
              echo "Updating file: $file"

              # tags.datadoghq.com/version を更新
              yq e ".metadata.labels[\"tags.datadoghq.com/version\"] = \"${VERSION}\"" -i "$file"
              yq e ".spec.template.metadata.labels[\"tags.datadoghq.com/version\"] = \"${VERSION}\"" -i "$file"
              
              # イメージタグのみを更新
              yq e ".spec.template.spec.containers[].image |= sub(\":.*$\"; \":${VERSION}\")" -i "$file"

              echo "Updated file: $file"
            done

            git add .
            git commit -m "release: ${SERVICE_NAME} ${VERSION}"
            git push origin $BRANCH_NAME
      - run:
          name: Create pull request
          # ref: https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#create-a-pull-request
          command: |
            source .env_variable_for_ash

            response=$(curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/ksrnnb/ci_create_pr/pulls \
            -d "{ \
              \"title\": \"release: ${SERVICE_NAME} ${VERSION}\", \
              \"body\": \"release ${SERVICE_NAME} ${VERSION}\", \
              \"head\": \"${BRANCH_NAME}\", \
              \"base\": \"main\" \
            }")

            # `// empty`` is used to convert null to empty string
            # ref: https://jqlang.github.io/jq/manual/#:~:text=Example-,empty,-empty%20returns%20no
            pr_url=$(echo $response | jq -r '.html_url // empty')
            if [ -z "$pr_url" ]; then
              echo "Error: PR URL not found in the response."
              exit 1
            fi

            echo $pr_url
jobs:
  create_pr_job:
    docker:
      - image: alpine:3.19.0
    steps:
      - add_ssh_keys:
          fingerprints:
            - "SHA256:7p8XHnZsyzH7w0g/mBhp4dEeHNO6gPyTV5io5esfZPs"
      - install_commands
      - set_up_git
      - create_pr

workflows:
  version: 2
  build:
    jobs:
      - create_pr_job:
          filters:
            tags:
              only: /^microservices.*/
            branches:
              ignore: /.*/
